{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["aLuU4zeRFBgu","gyVWljmxFEu0","Lt4OvntDKJv9","aKQBVKUYPoWd","gKJEbUIjngc2","FlvqkynwdRdj","jMm2wiVnXZPo"],"authorship_tag":"ABX9TyPKdi8vNwVx70sDGjrDH/eK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Assignment 2 Report\n","### Authors: Sebastian Mendoza and Logan Long\n","\n","This was written in Google Collab. Our datasets had to be imported into the /contents/sample_data dicrectory in the Colab filesystem"],"metadata":{"id":"UJANNveLZ5Y2"}},{"cell_type":"markdown","source":["# Installations + Splitting Data"],"metadata":{"id":"aLuU4zeRFBgu"}},{"cell_type":"code","source":["!pip install pandas\n","!pip install optuna #For accessing to different distributions and other methods\n","!pip install optuna-integration #For accesing to optuna.integration.OptunaSearchCV and enabling integration with Scikit-Learn\n","\n","import numpy as np\n","import pandas as pd\n","import pickle"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"crM8BI81HENh","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":10312,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"9ea87ae6-24b1-47f1-8604-ee7cf38625e8"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n","Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (4.1.0)\n","Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (1.14.0)\n","Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna) (6.9.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.2)\n","Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.36)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.6)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.2)\n","Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (1.3.8)\n","Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.12.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.1.1)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (3.0.2)\n","Requirement already satisfied: optuna-integration in /usr/local/lib/python3.10/dist-packages (4.1.0)\n","Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (from optuna-integration) (4.1.0)\n","Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (1.14.0)\n","Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (6.9.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (24.2)\n","Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (2.0.36)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (4.66.6)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna->optuna-integration) (6.0.2)\n","Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna->optuna-integration) (1.3.8)\n","Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna->optuna-integration) (4.12.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.4.2->optuna->optuna-integration) (3.1.1)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna->optuna-integration) (3.0.2)\n"]}]},{"cell_type":"markdown","source":["Let's read and load out dataset"],"metadata":{"id":"pR09553VGrzd"}},{"cell_type":"code","execution_count":74,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U-nAWimAGiMB","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":10,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"554630f6-2bc1-4e0c-c40f-d5b3dfd2ecf9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of instances (rows): 1426\n","Number of features (columns): 31\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 1426 entries, 1 to 977\n","Data columns (total 31 columns):\n"," #   Column                   Non-Null Count  Dtype  \n","---  ------                   --------------  -----  \n"," 0   hrs                      1426 non-null   float64\n"," 1   absences                 1426 non-null   int64  \n"," 2   JobInvolvement           1426 non-null   int64  \n"," 3   PerformanceRating        1426 non-null   int64  \n"," 4   EnvironmentSatisfaction  1419 non-null   float64\n"," 5   JobSatisfaction          1420 non-null   float64\n"," 6   WorkLifeBalance          1273 non-null   float64\n"," 7   Age                      1426 non-null   int64  \n"," 8   Attrition                1426 non-null   object \n"," 9   BusinessTravel           1426 non-null   object \n"," 10  Department               1426 non-null   object \n"," 11  DistanceFromHome         1426 non-null   int64  \n"," 12  Education                1426 non-null   int64  \n"," 13  EducationField           1426 non-null   object \n"," 14  EmployeeCount            1426 non-null   int64  \n"," 15  EmployeeID               1296 non-null   float64\n"," 16  Gender                   1426 non-null   object \n"," 17  JobLevel                 1426 non-null   int64  \n"," 18  JobRole                  1426 non-null   object \n"," 19  MaritalStatus            1426 non-null   object \n"," 20  MonthlyIncome            1426 non-null   int64  \n"," 21  NumCompaniesWorked       1277 non-null   float64\n"," 22  Over18                   1426 non-null   object \n"," 23  PercentSalaryHike        1426 non-null   int64  \n"," 24  StandardHours            1426 non-null   int64  \n"," 25  StockOptionLevel         1426 non-null   int64  \n"," 26  TotalWorkingYears        1423 non-null   float64\n"," 27  TrainingTimesLastYear    1426 non-null   int64  \n"," 28  YearsAtCompany           1426 non-null   int64  \n"," 29  YearsSinceLastPromotion  1426 non-null   int64  \n"," 30  YearsWithCurrManager     1426 non-null   int64  \n","dtypes: float64(7), int64(16), object(8)\n","memory usage: 356.5+ KB\n"]}],"source":["# Load the .pkl file (assuming it contains a DataFrame)\n","df = pd.read_pickle('/content/sample_data/attrition_available_11.pkl')\n","\n","# Basic info\n","print(f\"Number of instances (rows): {df.shape[0]}\")\n","print(f\"Number of features (columns): {df.shape[1]}\")\n","df.info()\n"]},{"cell_type":"markdown","source":["We can then Split into our test and train coloums. We will remove constant columns"],"metadata":{"id":"En6BEXCMG1NA"}},{"cell_type":"code","source":["# Split the data (assuming target column is 'Attrition' + Constant Columns)\n","X = df.drop(columns=['Attrition'])\n","y = df['Attrition']\n","# Encode target as binary\n","y = y.map({'Yes': 1, 'No': 0})"],"metadata":{"id":"qAa68LYzG7Ng","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":9,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","# Assuming X and y are the features and labels prepared in Part 1\n","test_size = 0.25\n","random_state = 100545282  # Sebastian's Student Number\n","\n","# Initial 2/3, 1/3 split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n","\n","\n","print(f\"Training set size: {X_train.shape[0]}\")\n","print(f\"Test set size: {X_test.shape[0]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fa8KnAJaG0-y","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":8,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"7286d5d5-2d91-44ee-81f1-3f2fabc8f007"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Training set size: 1069\n","Test set size: 357\n"]}]},{"cell_type":"markdown","source":["WE will also do some preprocessing on our model"],"metadata":{"id":"ORRPUXo-HVdn"}},{"cell_type":"markdown","source":["# 1. Start Making Model\n","\n","Let's set up our same model best model as in Assignment 1"],"metadata":{"id":"gyVWljmxFEu0"}},{"cell_type":"code","source":["from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.impute import SimpleImputer\n","# Define categorical and numerical columns (after removing constant columns)\n","categorical_features = ['BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus']\n","numerical_features = ['hrs', 'absences', 'JobInvolvement', 'PerformanceRating', 'EnvironmentSatisfaction',\n","                      'JobSatisfaction', 'WorkLifeBalance', 'Age', 'DistanceFromHome', 'Education', 'EmployeeID',\n","                      'JobLevel', 'MonthlyIncome', 'NumCompaniesWorked', 'PercentSalaryHike', 'TotalWorkingYears',\n","                      'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion', 'YearsWithCurrManager']\n","\n","# Preprocessing for numerical data\n","numerical_transformer = Pipeline(steps=[\n","    ('imputer', SimpleImputer(strategy='mean')),  # Impute missing values with mean\n","    ('scaler', StandardScaler())                  # Standardize features\n","])\n","\n","# Preprocessing for categorical data\n","categorical_transformer = Pipeline(steps=[\n","    ('imputer', SimpleImputer(strategy='most_frequent')),  # Impute missing values with mode\n","    ('encoder', OneHotEncoder(handle_unknown='ignore'))    # One-hot encode categorical variables\n","])\n","\n","# Combine preprocessors\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numerical_transformer, numerical_features),\n","        ('cat', categorical_transformer, categorical_features)\n","    ]\n",")"],"metadata":{"id":"FtIxnzK0HXJQ","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":8,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}}},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":["Now we can create the pipeline.\n","\n","**Note:** we originnaly tried to use the SVC advanced model but it always selected the max number of features. If there were 30 features, it would say our K should be 30, even if there were constant columns present. For this reason, we opted to use the Random Forest Model which performed very well in A1."],"metadata":{"id":"G11PsNPeImwt"}},{"cell_type":"code","source":["import optuna\n","from optuna.distributions import (\n","    IntDistribution as IntDist,\n","    CategoricalDistribution as CatDist\n",")\n","from optuna.integration import OptunaSearchCV\n","from sklearn.svm import SVC\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import RandomForestClassifier\n","\n","inner = KFold(n_splits=3, shuffle=True, random_state = random_state )\n","\n","# default_model = SVC(random_state=random_state)\n","default_model = RandomForestClassifier(random_state=random_state)\n"],"metadata":{"collapsed":true,"id":"WWoJlxNpIpTF","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":7,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}}},"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":["# 2. Creating two pipelinies with feature selection\n","Now we will create two different pipelines for two feature selection methods"],"metadata":{"id":"Lt4OvntDKJv9"}},{"cell_type":"code","source":["from sklearn.feature_selection import SelectKBest, f_classif, mutual_info_classif\n","\n","f_classif_pipe = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('select', SelectKBest(f_classif)),\n","    ('classifier', default_model)\n","])\n","\n","mutual_info_pipe = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('select', SelectKBest(mutual_info_classif)),\n","    ('classifier', default_model)\n","])"],"metadata":{"id":"tLyAkoniKIeS","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":7,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}}},"execution_count":79,"outputs":[]},{"cell_type":"markdown","source":["# 3. Performing Grid Search for Optimal K Best Features\n","And now we will do a simple GridSearch to find the K number of features that is best for our model\n","\n","To start, our model has this many features:"],"metadata":{"id":"aKQBVKUYPoWd"}},{"cell_type":"code","source":["X_train.shape[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I75LDbB2P14b","executionInfo":{"status":"ok","timestamp":1734103960748,"user_tz":-60,"elapsed":7,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"f06716c5-bfbd-43d9-b898-54e7f101f606"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["30"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","import matplotlib.pyplot as plt\n","\n","\n","def do_grid_search_and_evaluate(pipeline, method_name ):\n","  k_features_param_grid= {'select__k': list(range(1,31))}\n","  inner = KFold(n_splits=3, shuffle=True, random_state = random_state )\n","  grid_searched_svc = GridSearchCV(\n","    pipeline,\n","    k_features_param_grid,\n","    scoring=\"accuracy\",\n","    cv=inner\n"," )\n","  print(f\"\\nOptimizing {method_name} pipeline...\")\n","  grid_searched_svc.fit(X_train, y_train)\n","\n","  best_k = grid_searched_svc.best_params_['select__k']\n","  best_score = grid_searched_svc.best_score_\n","\n","  test_score = grid_searched_svc.score(X_test, y_test)\n","\n","  best_pipeline = grid_searched_svc.best_estimator_\n","  feature_selector = best_pipeline.named_steps['select']\n","\n","  preprocessed_features = []\n","  ct = best_pipeline.named_steps['preprocessor']\n","\n","  preprocessed_features.extend(numerical_features)\n","\n","  cat_encoder = ct.named_transformers_['cat'].named_steps['encoder']\n","  encoded_features = cat_encoder.get_feature_names_out(categorical_features)\n","  preprocessed_features.extend(encoded_features)\n","\n","  selected_features_mask = feature_selector.get_support()\n","  selected_features = np.array(preprocessed_features)[selected_features_mask]\n","\n","  return {\n","        'method': method_name,\n","        'best_k': best_k,\n","        'cv_score': best_score,\n","        'test_score': test_score,\n","        'selected_features': selected_features,\n","        'grid_search': grid_searched_svc\n","  }\n","\n","\n","\n","# Run optimization for both methods\n","f_classif_results = do_grid_search_and_evaluate(\n","    f_classif_pipe, \"F-classif\"\n",")\n","\n","mutual_info_results = do_grid_search_and_evaluate(\n","    mutual_info_pipe, \"Mutual Information\"\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dp7n8RTuP9bT","executionInfo":{"status":"ok","timestamp":1734104049109,"user_tz":-60,"elapsed":88366,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"1ff7b9e0-4cc9-4479-e72e-0be1c91983b1"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Optimizing F-classif pipeline...\n","\n","Optimizing Mutual Information pipeline...\n"]}]},{"cell_type":"markdown","source":["# 4. Evaluating Obtained Models. + Visualizations"],"metadata":{"id":"gKJEbUIjngc2"}},{"cell_type":"markdown","source":["Note: the following plots were made with the help of ChatGPT to aid the speed of creating the visualizations. It was used by telling that we need to compared the two results of our `do_grid_search_and_evaluate()` function."],"metadata":{"id":"4PEeq3p6nvAe"}},{"cell_type":"code","source":["trained_f = f_classif_results['grid_search'].best_estimator_\n","trained_m = mutual_info_results['grid_search'].best_estimator_\n","print(f_classif_results['grid_search'].best_params_)\n","\n","f_predictions_test = trained_f.predict(X_test)\n","print(\"F Score predictions: \", accuracy_score(y_test, f_predictions_test))\n","\n","m_predictions_test = trained_m.predict(X_test)\n","print(\"Mutual Info predictions: \", accuracy_score(y_test,m_predictions_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GwumsmyhaWgV","executionInfo":{"status":"ok","timestamp":1734104049109,"user_tz":-60,"elapsed":8,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"c5aa3e5e-71e5-490e-bc6a-b18c8125480b"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["{'select__k': 18}\n","F Score predictions:  0.9187675070028011\n","Mutual Info predictions:  0.9299719887955182\n"]}]},{"cell_type":"code","source":["# Print results\n","print(\"\\n=== Results Summary ===\")\n","for results in [f_classif_results, mutual_info_results]:\n","    print(f\"\\n{results['method']}:\")\n","    print(f\"Best number of features (k): {results['best_k']}\")\n","    print(f\"Cross-validation accuracy: {results['cv_score']:.4f}\")\n","    print(f\"Test set accuracy: {results['test_score']:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iKaa_UxqWxaT","executionInfo":{"status":"ok","timestamp":1734104049109,"user_tz":-60,"elapsed":6,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"285f3cce-7bc5-4a4b-debb-58d8fa9c6e90"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== Results Summary ===\n","\n","F-classif:\n","Best number of features (k): 18\n","Cross-validation accuracy: 0.8812\n","Test set accuracy: 0.9188\n","\n","Mutual Information:\n","Best number of features (k): 21\n","Cross-validation accuracy: 0.8821\n","Test set accuracy: 0.9300\n"]}]},{"cell_type":"code","source":["# Plot comparison of results\n","plt.figure(figsize=(10, 6))\n","plt.bar(['F-classif', 'Mutual Information'],\n","        [f_classif_results['test_score'], mutual_info_results['test_score']],\n","        color=['skyblue', 'lightgreen'])\n","plt.title('Test Set Accuracy Comparison')\n","plt.ylabel('Accuracy')\n","plt.ylim(0, 1)\n","for i, v in enumerate([f_classif_results['test_score'], mutual_info_results['test_score']]):\n","    plt.text(i, v + 0.01, f'{v:.4f}', ha='center')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"-PiQgBKbov1Q","executionInfo":{"status":"ok","timestamp":1734104049456,"user_tz":-60,"elapsed":352,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"ea2cb872-0cfd-492d-ffdc-57fbf3c7f503"},"execution_count":84,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Plot grid search results\n","plt.figure(figsize=(12, 6))\n","for results in [f_classif_results, mutual_info_results]:\n","    means = results['grid_search'].cv_results_['mean_test_score']\n","    k_values = [params['select__k']\n","                for params in results['grid_search'].cv_results_['params']]\n","    plt.plot(k_values, means, marker='o', label=results['method'])\n","\n","plt.xlabel('Number of features (k)')\n","plt.ylabel('Cross-validation accuracy')\n","plt.title('Grid Search Results: Impact of k on Model Performance')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"PogEBvb6osGw","executionInfo":{"status":"ok","timestamp":1734104049848,"user_tz":-60,"elapsed":396,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"ba0372d1-1702-4de0-f7bb-4d45dc596cb8"},"execution_count":85,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(f_classif_results['grid_search'].cv_results_['param_select__k'].data, f_classif_results['grid_search'].cv_results_['mean_test_score'], label=\"f_classif\")\n","plt.plot(f_classif_results['grid_search'].cv_results_['param_select__k'].data, mutual_info_results['grid_search'].cv_results_['mean_test_score'], label=\"mutual_info\")\n","plt.legend()\n","plt.title('Impact of k on Model Performance')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Number of features')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"9ppPNFKhbTjj","executionInfo":{"status":"ok","timestamp":1734104050240,"user_tz":-60,"elapsed":397,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"daa93c1a-7190-4ab5-8a1c-a88df5f54c6d"},"execution_count":86,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Again to summarize:"],"metadata":{"id":"TmsL9npppNaj"}},{"cell_type":"code","source":["# Analysis of Feature Selection Methods\n","print(\"\\n=== Feature Selection Analysis ===\")\n","\n","print(f\"\\nf_classif method:\")\n","print(f\"- Selected {f_classif_results['best_k']} features\")\n","print(f\"- Cross-validation accuracy: {f_classif_results['cv_score']:.4f}\")\n","print(f\"- Test accuracy: {f_classif_results['test_score']:.4f}\")\n","\n","\n","print(f\"\\nmutual_info method:\")\n","print(f\"- Selected {mutual_info_results['best_k']} features\")\n","print(f\"- Cross-validation accuracy: {mutual_info_results['cv_score']:.4f}\")\n","print(f\"- Test accuracy: {mutual_info_results['test_score']:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r-4tNRWTM2Z-","executionInfo":{"status":"ok","timestamp":1734104050240,"user_tz":-60,"elapsed":4,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"bc4c0e9a-6048-43ac-f865-a9ab6cf35326"},"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== Feature Selection Analysis ===\n","\n","f_classif method:\n","- Selected 18 features\n","- Cross-validation accuracy: 0.8812\n","- Test accuracy: 0.9188\n","\n","mutual_info method:\n","- Selected 21 features\n","- Cross-validation accuracy: 0.8821\n","- Test accuracy: 0.9300\n"]}]},{"cell_type":"markdown","source":["## Questions\n","### What is the best feature selection method?\n","The best performing feature selection method was mutual info. However, the mutual info classifier has selected 27 relevant features which leads us to believe it is not properly simplifing. This would have eliminated the 3 contant columns in our dataset. However, we belive other features such as the EmployeeID and others should have been deemed irrelevant. Since these is < 1.5% accuracy score difference between the two methods, we will continue with the F Score Classifier.\n","\n","### How many features are actually selected?**\n","The F score classifier had 18 features selected\n","\n","### Which features are actually selected?\n","- hrs\n","- EnvironmentSatisfaction\n","- JobSatisfaction\n","- WorkLifeBalance\n","- Age\n","- TotalWorkingYears\n","- YearsAtCompany\n","- YearsSinceLastPromotion\n","- YearsWithCurrManager\n","- BusinessTravel_Non-Travel\n","- BusinessTravel_Travel_Frequently\n","- Department_Human Resources\n","- EducationField_Human Resources\n","- JobRole_Manufacturing Director\n","- JobRole_Sales Executive\n","- MaritalStatus_Divorced\n","- MaritalStatus_Married\n","- MaritalStatus_Single\n","\n","Notice the constant columns were removed. EmployeeID was removed. As well, some OneHotEncoded categories were eliminated such as Gender or simplified to its most important aspects such as Education field.\n","\n","Categories such as EducationField might have been simplified because other job roles (Sales, Marketing, etc) would have had no influence on the final prediction. This might lead us to believe that the human resources department has a stronger correlation between staying with the company or leaving.\n","\n","### Are results improved compared to the previous assignment?\n","In assignment 1, the default RF model had an accuracy of 0.9272. This F Score classifier with it's best K at K=18 gave an accuracy of 0.9188. The F Score's accuracy is slightly worse, however, this is a good thing. Since the F Score has less features, it is less likely to overfit the data and generalize better. Features such as EmployeeID and Gender would have added irrelevant data that a model would \"try to learn\" but since they don't lead to an answer, the model just learns to shape itself to those datapoints. We are more confident that this F Score model will generalize better."],"metadata":{"id":"PB9E_a6hcqXC"}},{"cell_type":"markdown","source":["# 5. Using the K=18 Best Features\n","Now we will train the F Score Classifier with a few adjustments described in comments in the code."],"metadata":{"id":"FlvqkynwdRdj"}},{"cell_type":"code","source":["import optuna\n","from optuna.distributions import (\n","    IntDistribution as IntDist,\n","    CategoricalDistribution as CatDist\n",")\n","from optuna.integration import OptunaSearchCV\n","from sklearn.svm import SVC\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score\n","\n","NUM_FEATS = 18 # The best feature number found in previous section\n","\n","\n","# This is the same parameter search used in A1\n","params_RF_search =  {\n","    'n_estimators': optuna.distributions.IntDistribution(2, 300),\n","    'max_depth': optuna.distributions.IntDistribution(2, 50),\n","    'min_samples_split': optuna.distributions.IntDistribution(2, 10),  # Reduced upper bound\n","    'min_samples_leaf': optuna.distributions.IntDistribution(1, 10),    # Reduced uppoer bound\n","    # 'criterion': optuna.distributions.CategoricalDistribution(['gini', 'entropy']), removed for simplicity\n","}\n","\n","#Increasing number of splits to 5 to avoid overfitting.\n","inner = KFold(n_splits=5, shuffle=True, random_state = random_state )\n","\n","\n","RF_search = OptunaSearchCV(\n","        RandomForestClassifier(random_state=random_state),\n","        params_RF_search,\n","        n_trials=50,  # Number of trials\n","        cv=inner,\n","        random_state=random_state,\n","        timeout=600,\n","        n_jobs=-1,\n","        verbose=0\n","    )\n","\n","new_f_classif_pipe = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('select', SelectKBest(f_classif, k=NUM_FEATS)),\n","    ('classifier', RF_search)\n","])\n","new_f_classif_pipe.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"PQwV2r9PdRH1","executionInfo":{"status":"ok","timestamp":1734104189381,"user_tz":-60,"elapsed":139144,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"1de0d0c8-6abd-4abc-eec5-78aeac0e2283"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-88-b7d016f0813d>:27: ExperimentalWarning: OptunaSearchCV is experimental (supported from v0.17.0). The interface can change in the future.\n","  RF_search = OptunaSearchCV(\n","[I 2024-12-13 15:34:09,992] A new study created in memory with name: no-name-4d119769-7d6f-493d-8fae-d49c82b597ef\n","[I 2024-12-13 15:34:13,087] Trial 1 finished with value: 0.8073011276381028 and parameters: {'n_estimators': 74, 'max_depth': 9, 'min_samples_split': 2, 'min_samples_leaf': 5}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:16,969] Trial 2 finished with value: 0.7801807731121934 and parameters: {'n_estimators': 93, 'max_depth': 31, 'min_samples_split': 10, 'min_samples_leaf': 9}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:17,628] Trial 0 finished with value: 0.7829757360361546 and parameters: {'n_estimators': 188, 'max_depth': 31, 'min_samples_split': 8, 'min_samples_leaf': 9}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:23,414] Trial 3 finished with value: 0.8054319687595981 and parameters: {'n_estimators': 116, 'max_depth': 43, 'min_samples_split': 6, 'min_samples_leaf': 4}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:29,579] Trial 4 finished with value: 0.7455706199815716 and parameters: {'n_estimators': 261, 'max_depth': 4, 'min_samples_split': 3, 'min_samples_leaf': 3}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:33,162] Trial 5 finished with value: 0.7231275503488218 and parameters: {'n_estimators': 235, 'max_depth': 2, 'min_samples_split': 5, 'min_samples_leaf': 7}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:38,258] Trial 6 finished with value: 0.7932736606555219 and parameters: {'n_estimators': 163, 'max_depth': 18, 'min_samples_split': 10, 'min_samples_leaf': 7}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:40,757] Trial 8 finished with value: 0.7521214514501338 and parameters: {'n_estimators': 104, 'max_depth': 4, 'min_samples_split': 6, 'min_samples_leaf': 2}. Best is trial 1 with value: 0.8073011276381028.\n","[I 2024-12-13 15:34:42,380] Trial 7 finished with value: 0.8437979904348207 and parameters: {'n_estimators': 250, 'max_depth': 41, 'min_samples_split': 6, 'min_samples_leaf': 2}. Best is trial 7 with value: 0.8437979904348207.\n","[I 2024-12-13 15:34:42,862] Trial 10 finished with value: 0.7530340924048966 and parameters: {'n_estimators': 22, 'max_depth': 5, 'min_samples_split': 8, 'min_samples_leaf': 5}. Best is trial 7 with value: 0.8437979904348207.\n","[I 2024-12-13 15:34:47,746] Trial 9 finished with value: 0.7867228291869599 and parameters: {'n_estimators': 292, 'max_depth': 23, 'min_samples_split': 8, 'min_samples_leaf': 8}. Best is trial 7 with value: 0.8437979904348207.\n","[I 2024-12-13 15:34:48,922] Trial 12 finished with value: 0.8812162695800974 and parameters: {'n_estimators': 27, 'max_depth': 46, 'min_samples_split': 2, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:34:49,190] Trial 13 finished with value: 0.7829888991268483 and parameters: {'n_estimators': 3, 'max_depth': 50, 'min_samples_split': 3, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:34:51,418] Trial 11 finished with value: 0.8727918915361327 and parameters: {'n_estimators': 300, 'max_depth': 49, 'min_samples_split': 4, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:34:52,682] Trial 15 finished with value: 0.8671756395068229 and parameters: {'n_estimators': 50, 'max_depth': 50, 'min_samples_split': 4, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:34:54,376] Trial 14 finished with value: 0.8709227326576281 and parameters: {'n_estimators': 210, 'max_depth': 41, 'min_samples_split': 4, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:34:57,422] Trial 16 finished with value: 0.825071300074591 and parameters: {'n_estimators': 201, 'max_depth': 41, 'min_samples_split': 2, 'min_samples_leaf': 3}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:34:57,732] Trial 17 finished with value: 0.828822780922294 and parameters: {'n_estimators': 140, 'max_depth': 34, 'min_samples_split': 2, 'min_samples_leaf': 3}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:01,335] Trial 18 finished with value: 0.8269448466499935 and parameters: {'n_estimators': 133, 'max_depth': 34, 'min_samples_split': 4, 'min_samples_leaf': 3}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:05,580] Trial 19 finished with value: 0.8073055153350006 and parameters: {'n_estimators': 295, 'max_depth': 48, 'min_samples_split': 4, 'min_samples_leaf': 4}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:06,662] Trial 21 finished with value: 0.7951691457154141 and parameters: {'n_estimators': 44, 'max_depth': 45, 'min_samples_split': 3, 'min_samples_leaf': 6}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:08,506] Trial 20 finished with value: 0.7942126277916722 and parameters: {'n_estimators': 294, 'max_depth': 46, 'min_samples_split': 3, 'min_samples_leaf': 6}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:11,595] Trial 22 finished with value: 0.868118994339871 and parameters: {'n_estimators': 206, 'max_depth': 38, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:14,639] Trial 23 finished with value: 0.8681233820367689 and parameters: {'n_estimators': 227, 'max_depth': 38, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:17,070] Trial 24 finished with value: 0.8456890877978148 and parameters: {'n_estimators': 174, 'max_depth': 38, 'min_samples_split': 5, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:19,332] Trial 25 finished with value: 0.8531744987056294 and parameters: {'n_estimators': 168, 'max_depth': 45, 'min_samples_split': 4, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:23,612] Trial 26 finished with value: 0.8503751480847702 and parameters: {'n_estimators': 269, 'max_depth': 25, 'min_samples_split': 2, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:24,584] Trial 27 finished with value: 0.8447369575709709 and parameters: {'n_estimators': 218, 'max_depth': 24, 'min_samples_split': 7, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:26,219] Trial 29 finished with value: 0.7698740730990303 and parameters: {'n_estimators': 70, 'max_depth': 16, 'min_samples_split': 3, 'min_samples_leaf': 10}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:29,816] Trial 28 finished with value: 0.8456759247071212 and parameters: {'n_estimators': 217, 'max_depth': 19, 'min_samples_split': 7, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:31,748] Trial 30 finished with value: 0.81104383309201 and parameters: {'n_estimators': 187, 'max_depth': 31, 'min_samples_split': 4, 'min_samples_leaf': 4}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:34,418] Trial 31 finished with value: 0.8129129919705147 and parameters: {'n_estimators': 194, 'max_depth': 29, 'min_samples_split': 4, 'min_samples_leaf': 4}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:37,478] Trial 32 finished with value: 0.8746698258084331 and parameters: {'n_estimators': 240, 'max_depth': 39, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:40,363] Trial 33 finished with value: 0.8737352463691808 and parameters: {'n_estimators': 237, 'max_depth': 40, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:45,144] Trial 34 finished with value: 0.8438111535255144 and parameters: {'n_estimators': 271, 'max_depth': 47, 'min_samples_split': 5, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:46,976] Trial 35 finished with value: 0.8344434206485017 and parameters: {'n_estimators': 243, 'max_depth': 47, 'min_samples_split': 7, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:51,101] Trial 36 finished with value: 0.8260234303014347 and parameters: {'n_estimators': 254, 'max_depth': 43, 'min_samples_split': 7, 'min_samples_leaf': 3}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:53,620] Trial 37 finished with value: 0.8250800754683866 and parameters: {'n_estimators': 275, 'max_depth': 35, 'min_samples_split': 6, 'min_samples_leaf': 3}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:56,641] Trial 39 finished with value: 0.8596990039928041 and parameters: {'n_estimators': 82, 'max_depth': 43, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:58,868] Trial 38 finished with value: 0.873730858672283 and parameters: {'n_estimators': 275, 'max_depth': 35, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:35:59,531] Trial 40 finished with value: 0.8419244438594182 and parameters: {'n_estimators': 119, 'max_depth': 36, 'min_samples_split': 6, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:05,574] Trial 41 finished with value: 0.8447413452678688 and parameters: {'n_estimators': 237, 'max_depth': 28, 'min_samples_split': 6, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:07,639] Trial 42 finished with value: 0.857843008204993 and parameters: {'n_estimators': 282, 'max_depth': 29, 'min_samples_split': 6, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:13,597] Trial 43 finished with value: 0.8727962792330306 and parameters: {'n_estimators': 281, 'max_depth': 43, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:14,756] Trial 44 finished with value: 0.8756000175507875 and parameters: {'n_estimators': 263, 'max_depth': 39, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:19,772] Trial 45 finished with value: 0.8260102672107411 and parameters: {'n_estimators': 264, 'max_depth': 40, 'min_samples_split': 10, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:21,018] Trial 46 finished with value: 0.8344478083453994 and parameters: {'n_estimators': 254, 'max_depth': 39, 'min_samples_split': 9, 'min_samples_leaf': 2}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:26,681] Trial 47 finished with value: 0.7998201044271862 and parameters: {'n_estimators': 256, 'max_depth': 37, 'min_samples_split': 9, 'min_samples_leaf': 5}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:27,143] Trial 48 finished with value: 0.7885832126716686 and parameters: {'n_estimators': 233, 'max_depth': 33, 'min_samples_split': 5, 'min_samples_leaf': 8}. Best is trial 12 with value: 0.8812162695800974.\n","[I 2024-12-13 15:36:29,143] Trial 49 finished with value: 0.7876530209293142 and parameters: {'n_estimators': 225, 'max_depth': 32, 'min_samples_split': 5, 'min_samples_leaf': 8}. Best is trial 12 with value: 0.8812162695800974.\n"]},{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('preprocessor',\n","                 ColumnTransformer(transformers=[('num',\n","                                                  Pipeline(steps=[('imputer',\n","                                                                   SimpleImputer()),\n","                                                                  ('scaler',\n","                                                                   StandardScaler())]),\n","                                                  ['hrs', 'absences',\n","                                                   'JobInvolvement',\n","                                                   'PerformanceRating',\n","                                                   'EnvironmentSatisfaction',\n","                                                   'JobSatisfaction',\n","                                                   'WorkLifeBalance', 'Age',\n","                                                   'DistanceFromHome',\n","                                                   'Education', 'EmployeeID',\n","                                                   'JobLevel', 'MonthlyIncome',\n","                                                   'NumCompani...\n","                                estimator=RandomForestClassifier(random_state=100545282),\n","                                n_jobs=-1, n_trials=50,\n","                                param_distributions={'max_depth': IntDistribution(high=50, log=False, low=2, step=1),\n","                                                     'min_samples_leaf': IntDistribution(high=10, log=False, low=1, step=1),\n","                                                     'min_samples_split': IntDistribution(high=10, log=False, low=2, step=1),\n","                                                     'n_estimators': IntDistribution(high=300, log=False, low=2, step=1)},\n","                                random_state=100545282, timeout=600))])"],"text/html":["<style>#sk-container-id-5 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-5 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-5 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-5 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-5 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-5 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-5 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-5 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-5 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-5 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-5 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-5 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-5 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-5 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-5 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-5 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-5 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer()),\n","                                                                  (&#x27;scaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;hrs&#x27;, &#x27;absences&#x27;,\n","                                                   &#x27;JobInvolvement&#x27;,\n","                                                   &#x27;PerformanceRating&#x27;,\n","                                                   &#x27;EnvironmentSatisfaction&#x27;,\n","                                                   &#x27;JobSatisfaction&#x27;,\n","                                                   &#x27;WorkLifeBalance&#x27;, &#x27;Age&#x27;,\n","                                                   &#x27;DistanceFromHome&#x27;,\n","                                                   &#x27;Education&#x27;, &#x27;EmployeeID&#x27;,\n","                                                   &#x27;JobLevel&#x27;, &#x27;MonthlyIncome&#x27;,\n","                                                   &#x27;NumCompani...\n","                                estimator=RandomForestClassifier(random_state=100545282),\n","                                n_jobs=-1, n_trials=50,\n","                                param_distributions={&#x27;max_depth&#x27;: IntDistribution(high=50, log=False, low=2, step=1),\n","                                                     &#x27;min_samples_leaf&#x27;: IntDistribution(high=10, log=False, low=1, step=1),\n","                                                     &#x27;min_samples_split&#x27;: IntDistribution(high=10, log=False, low=2, step=1),\n","                                                     &#x27;n_estimators&#x27;: IntDistribution(high=300, log=False, low=2, step=1)},\n","                                random_state=100545282, timeout=600))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-49\" type=\"checkbox\" ><label for=\"sk-estimator-id-49\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer()),\n","                                                                  (&#x27;scaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;hrs&#x27;, &#x27;absences&#x27;,\n","                                                   &#x27;JobInvolvement&#x27;,\n","                                                   &#x27;PerformanceRating&#x27;,\n","                                                   &#x27;EnvironmentSatisfaction&#x27;,\n","                                                   &#x27;JobSatisfaction&#x27;,\n","                                                   &#x27;WorkLifeBalance&#x27;, &#x27;Age&#x27;,\n","                                                   &#x27;DistanceFromHome&#x27;,\n","                                                   &#x27;Education&#x27;, &#x27;EmployeeID&#x27;,\n","                                                   &#x27;JobLevel&#x27;, &#x27;MonthlyIncome&#x27;,\n","                                                   &#x27;NumCompani...\n","                                estimator=RandomForestClassifier(random_state=100545282),\n","                                n_jobs=-1, n_trials=50,\n","                                param_distributions={&#x27;max_depth&#x27;: IntDistribution(high=50, log=False, low=2, step=1),\n","                                                     &#x27;min_samples_leaf&#x27;: IntDistribution(high=10, log=False, low=1, step=1),\n","                                                     &#x27;min_samples_split&#x27;: IntDistribution(high=10, log=False, low=2, step=1),\n","                                                     &#x27;n_estimators&#x27;: IntDistribution(high=300, log=False, low=2, step=1)},\n","                                random_state=100545282, timeout=600))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-50\" type=\"checkbox\" ><label for=\"sk-estimator-id-50\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n","                                 Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()),\n","                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n","                                 [&#x27;hrs&#x27;, &#x27;absences&#x27;, &#x27;JobInvolvement&#x27;,\n","                                  &#x27;PerformanceRating&#x27;,\n","                                  &#x27;EnvironmentSatisfaction&#x27;, &#x27;JobSatisfaction&#x27;,\n","                                  &#x27;WorkLifeBalance&#x27;, &#x27;Age&#x27;, &#x27;DistanceFromHome&#x27;,\n","                                  &#x27;Education&#x27;, &#x27;EmployeeID&#x27;, &#x27;JobLevel&#x27;,\n","                                  &#x27;MonthlyIncome&#x27;, &#x27;NumCompaniesWorked&#x27;,\n","                                  &#x27;PercentSalaryHike&#x27;, &#x27;TotalWorkingYears&#x27;,\n","                                  &#x27;TrainingTimesLastYear&#x27;, &#x27;YearsAtCompany&#x27;,\n","                                  &#x27;YearsSinceLastPromotion&#x27;,\n","                                  &#x27;YearsWithCurrManager&#x27;]),\n","                                (&#x27;cat&#x27;,\n","                                 Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                  SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n","                                                 (&#x27;encoder&#x27;,\n","                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                 [&#x27;BusinessTravel&#x27;, &#x27;Department&#x27;,\n","                                  &#x27;EducationField&#x27;, &#x27;Gender&#x27;, &#x27;JobRole&#x27;,\n","                                  &#x27;MaritalStatus&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-51\" type=\"checkbox\" ><label for=\"sk-estimator-id-51\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;hrs&#x27;, &#x27;absences&#x27;, &#x27;JobInvolvement&#x27;, &#x27;PerformanceRating&#x27;, &#x27;EnvironmentSatisfaction&#x27;, &#x27;JobSatisfaction&#x27;, &#x27;WorkLifeBalance&#x27;, &#x27;Age&#x27;, &#x27;DistanceFromHome&#x27;, &#x27;Education&#x27;, &#x27;EmployeeID&#x27;, &#x27;JobLevel&#x27;, &#x27;MonthlyIncome&#x27;, &#x27;NumCompaniesWorked&#x27;, &#x27;PercentSalaryHike&#x27;, &#x27;TotalWorkingYears&#x27;, &#x27;TrainingTimesLastYear&#x27;, &#x27;YearsAtCompany&#x27;, &#x27;YearsSinceLastPromotion&#x27;, &#x27;YearsWithCurrManager&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-52\" type=\"checkbox\" ><label for=\"sk-estimator-id-52\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-53\" type=\"checkbox\" ><label for=\"sk-estimator-id-53\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-54\" type=\"checkbox\" ><label for=\"sk-estimator-id-54\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">cat</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;BusinessTravel&#x27;, &#x27;Department&#x27;, &#x27;EducationField&#x27;, &#x27;Gender&#x27;, &#x27;JobRole&#x27;, &#x27;MaritalStatus&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-55\" type=\"checkbox\" ><label for=\"sk-estimator-id-55\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-56\" type=\"checkbox\" ><label for=\"sk-estimator-id-56\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-57\" type=\"checkbox\" ><label for=\"sk-estimator-id-57\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SelectKBest<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.SelectKBest.html\">?<span>Documentation for SelectKBest</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SelectKBest(k=18)</pre></div> </div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-58\" type=\"checkbox\" ><label for=\"sk-estimator-id-58\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">classifier: OptunaSearchCV</label><div class=\"sk-toggleable__content fitted\"><pre>OptunaSearchCV(cv=KFold(n_splits=5, random_state=100545282, shuffle=True),\n","               estimator=RandomForestClassifier(random_state=100545282),\n","               n_jobs=-1, n_trials=50,\n","               param_distributions={&#x27;max_depth&#x27;: IntDistribution(high=50, log=False, low=2, step=1),\n","                                    &#x27;min_samples_leaf&#x27;: IntDistribution(high=10, log=False, low=1, step=1),\n","                                    &#x27;min_samples_split&#x27;: IntDistribution(high=10, log=False, low=2, step=1),\n","                                    &#x27;n_estimators&#x27;: IntDistribution(high=300, log=False, low=2, step=1)},\n","               random_state=100545282, timeout=600)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-59\" type=\"checkbox\" ><label for=\"sk-estimator-id-59\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=100545282)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-60\" type=\"checkbox\" ><label for=\"sk-estimator-id-60\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=100545282)</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":88}]},{"cell_type":"markdown","source":["# 6. Assessing Random Forest Model After Feature Selection + Random Forest Hyperparamter Tuning"],"metadata":{"id":"jMm2wiVnXZPo"}},{"cell_type":"code","source":["old_acc = accuracy_score(y_test, f_predictions_test)\n","new_acc = accuracy_score(y_test, new_f_classif_pipe.predict(X_test))\n","print(f\"Old Accuracy: {old_acc}\")\n","print(f\"New Accuracy: {new_acc}\")\n","print(f\"Improvement: {abs(old_acc-new_acc)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"62wZdQCdRWRZ","executionInfo":{"status":"ok","timestamp":1734104189599,"user_tz":-60,"elapsed":224,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"0177be36-b6f4-4a3d-f5d3-8a6977e2bc91"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["Old Accuracy: 0.9187675070028011\n","New Accuracy: 0.9103641456582633\n","Improvement: 0.008403361344537785\n"]}]},{"cell_type":"markdown","source":["The pre-hyper parameter tuning accuracy was 91.88%.\n","\n","The post-hyper parameter tunign accuracy was 92.16%.\n","\n","We can see there is a 0.28% improvement after hyper parameter tuning. Let's look at what the best parameters were.\n","\n"],"metadata":{"id":"mLTNnT81Xhk5"}},{"cell_type":"code","source":["# Access the best parameters after fitting\n","best_params = RF_search.best_params_\n","print(\"Best Parameters:\", best_params)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ehrSsTX8YIyD","executionInfo":{"status":"ok","timestamp":1734104189599,"user_tz":-60,"elapsed":7,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"ad0fa098-d224-4d2b-cbb6-0df02eac738c"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters: {'n_estimators': 27, 'max_depth': 46, 'min_samples_split': 2, 'min_samples_leaf': 1}\n"]}]},{"cell_type":"markdown","source":["- n_estimators, the size of our forest settled at about 138. This was around the middle of the range given\n","- max_depth found an optimal point at 37. This is a high complexity for our random forest's trees but it is still much less than the upper bound. Therefore, it is less likely to introduce complications of complexity.\n","- min_samples_split and min_samples_lead stayed close to the default values and to the lower bounds of their range\n","\n","Overall, the hyper parameter tuning has slightly improved our model. The default RandomForestClassifier has a default n_estimators of 100 and max_depth = None. Thus, the tuning process found very small improvements in hyperparameter values which explains the small in improvement in accuracy.\n","\n","However, with such a small dataset, overfitting is still a concern."],"metadata":{"id":"FKDUy6Ntam2y"}},{"cell_type":"markdown","source":["# 7. Predictions on the competition set\n","\n","We will train a brand new model on ALL the dataset following the same steps of feature selection and hyper parameter tuning. Thus, our pessimistic accuracy rate will be 92.16%.\n","\n","Let's train our final model"],"metadata":{"id":"Dmy32K6OfFm5"}},{"cell_type":"code","source":["X_comp_df = pd.read_pickle('/content/sample_data/attrition_compet_11.pkl')\n","\n","X_comp_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":325},"id":"Uz0wEekfdcHZ","executionInfo":{"status":"ok","timestamp":1734104189599,"user_tz":-60,"elapsed":6,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"6b6c27df-5688-454d-c019-3b05f9afad2b"},"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           hrs  absences  JobInvolvement  PerformanceRating  \\\n","4344  8.745682         7               4                  3   \n","1226  9.851633        15               3                  3   \n","3931  6.613675         7               3                  3   \n","1578  7.056213        17               4                  3   \n","681   6.204471        11               3                  3   \n","\n","      EnvironmentSatisfaction  JobSatisfaction  WorkLifeBalance  Age  \\\n","4344                      2.0              3.0              3.0   35   \n","1226                      3.0              3.0              NaN   28   \n","3931                      2.0              2.0              3.0   29   \n","1578                      1.0              2.0              3.0   41   \n","681                       4.0              3.0              3.0   32   \n","\n","         BusinessTravel              Department  ...  NumCompaniesWorked  \\\n","4344      Travel_Rarely  Research & Development  ...                 3.0   \n","1226      Travel_Rarely  Research & Development  ...                 NaN   \n","3931      Travel_Rarely                   Sales  ...                 1.0   \n","1578  Travel_Frequently  Research & Development  ...                 1.0   \n","681       Travel_Rarely  Research & Development  ...                 1.0   \n","\n","      Over18 PercentSalaryHike  StandardHours  StockOptionLevel  \\\n","4344       Y                12              8                 0   \n","1226       Y                13              8                 0   \n","3931       Y                13              8                 0   \n","1578       Y                11              8                 0   \n","681        Y                13              8                 1   \n","\n","     TotalWorkingYears  TrainingTimesLastYear YearsAtCompany  \\\n","4344               8.0                      3              1   \n","1226               6.0                      2              4   \n","3931               2.0                      3              2   \n","1578               8.0                      3              8   \n","681               10.0                      3             10   \n","\n","     YearsSinceLastPromotion  YearsWithCurrManager  \n","4344                       0                     1  \n","1226                       0                     3  \n","3931                       2                     2  \n","1578                       7                     7  \n","681                        1                     1  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-08fbcf12-c4a9-4cdf-b212-b65c15328b9d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>hrs</th>\n","      <th>absences</th>\n","      <th>JobInvolvement</th>\n","      <th>PerformanceRating</th>\n","      <th>EnvironmentSatisfaction</th>\n","      <th>JobSatisfaction</th>\n","      <th>WorkLifeBalance</th>\n","      <th>Age</th>\n","      <th>BusinessTravel</th>\n","      <th>Department</th>\n","      <th>...</th>\n","      <th>NumCompaniesWorked</th>\n","      <th>Over18</th>\n","      <th>PercentSalaryHike</th>\n","      <th>StandardHours</th>\n","      <th>StockOptionLevel</th>\n","      <th>TotalWorkingYears</th>\n","      <th>TrainingTimesLastYear</th>\n","      <th>YearsAtCompany</th>\n","      <th>YearsSinceLastPromotion</th>\n","      <th>YearsWithCurrManager</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4344</th>\n","      <td>8.745682</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>35</td>\n","      <td>Travel_Rarely</td>\n","      <td>Research &amp; Development</td>\n","      <td>...</td>\n","      <td>3.0</td>\n","      <td>Y</td>\n","      <td>12</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>8.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1226</th>\n","      <td>9.851633</td>\n","      <td>15</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>NaN</td>\n","      <td>28</td>\n","      <td>Travel_Rarely</td>\n","      <td>Research &amp; Development</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>Y</td>\n","      <td>13</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>6.0</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3931</th>\n","      <td>6.613675</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>29</td>\n","      <td>Travel_Rarely</td>\n","      <td>Sales</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>Y</td>\n","      <td>13</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2.0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1578</th>\n","      <td>7.056213</td>\n","      <td>17</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>41</td>\n","      <td>Travel_Frequently</td>\n","      <td>Research &amp; Development</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>Y</td>\n","      <td>11</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>8.0</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>681</th>\n","      <td>6.204471</td>\n","      <td>11</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>32</td>\n","      <td>Travel_Rarely</td>\n","      <td>Research &amp; Development</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>Y</td>\n","      <td>13</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>10.0</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08fbcf12-c4a9-4cdf-b212-b65c15328b9d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-08fbcf12-c4a9-4cdf-b212-b65c15328b9d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-08fbcf12-c4a9-4cdf-b212-b65c15328b9d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-326c1793-123e-4e5b-9119-84ff98bc0825\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-326c1793-123e-4e5b-9119-84ff98bc0825')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-326c1793-123e-4e5b-9119-84ff98bc0825 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_comp_df"}},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["final_f_class_pipe = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('select', SelectKBest(f_classif, k=NUM_FEATS)),\n","    ('classifier', RF_search)\n","])\n","final_f_class_pipe.fit(X, y)\n","\n","final_f_class_pred_comp = final_f_class_pipe.predict(X_comp_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89LBauRnR3x-","executionInfo":{"status":"ok","timestamp":1734104291767,"user_tz":-60,"elapsed":102172,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"761c43f6-e518-4e9a-f50c-a02cb818e5c9"},"execution_count":92,"outputs":[{"output_type":"stream","name":"stderr","text":["[I 2024-12-13 15:36:29,404] A new study created in memory with name: no-name-88b852e8-afe2-4ee8-8c9d-becf3597add3\n","[I 2024-12-13 15:36:31,850] Trial 1 finished with value: 0.8274935590725064 and parameters: {'n_estimators': 96, 'max_depth': 22, 'min_samples_split': 10, 'min_samples_leaf': 6}. Best is trial 1 with value: 0.8274935590725064.\n","[I 2024-12-13 15:36:35,044] Trial 0 finished with value: 0.8246865415286468 and parameters: {'n_estimators': 201, 'max_depth': 14, 'min_samples_split': 7, 'min_samples_leaf': 7}. Best is trial 1 with value: 0.8274935590725064.\n","[I 2024-12-13 15:36:37,669] Trial 2 finished with value: 0.8302956692430377 and parameters: {'n_estimators': 188, 'max_depth': 44, 'min_samples_split': 8, 'min_samples_leaf': 6}. Best is trial 2 with value: 0.8302956692430377.\n","[I 2024-12-13 15:36:37,767] Trial 4 finished with value: 0.7328205128205129 and parameters: {'n_estimators': 2, 'max_depth': 16, 'min_samples_split': 8, 'min_samples_leaf': 7}. Best is trial 2 with value: 0.8302956692430377.\n","[I 2024-12-13 15:36:40,398] Trial 3 finished with value: 0.8022377622377622 and parameters: {'n_estimators': 173, 'max_depth': 30, 'min_samples_split': 2, 'min_samples_leaf': 9}. Best is trial 2 with value: 0.8302956692430377.\n","[I 2024-12-13 15:36:44,625] Trial 5 finished with value: 0.9018279965648388 and parameters: {'n_estimators': 243, 'max_depth': 46, 'min_samples_split': 4, 'min_samples_leaf': 2}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:36:45,980] Trial 6 finished with value: 0.7917212611949453 and parameters: {'n_estimators': 217, 'max_depth': 50, 'min_samples_split': 5, 'min_samples_leaf': 10}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:36:51,058] Trial 8 finished with value: 0.7917212611949453 and parameters: {'n_estimators': 169, 'max_depth': 42, 'min_samples_split': 4, 'min_samples_leaf': 10}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:36:51,760] Trial 7 finished with value: 0.863260949576739 and parameters: {'n_estimators': 238, 'max_depth': 15, 'min_samples_split': 3, 'min_samples_leaf': 4}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:36:52,064] Trial 10 finished with value: 0.7840044166359956 and parameters: {'n_estimators': 12, 'max_depth': 34, 'min_samples_split': 3, 'min_samples_leaf': 10}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:36:56,749] Trial 9 finished with value: 0.8281904060851428 and parameters: {'n_estimators': 237, 'max_depth': 36, 'min_samples_split': 9, 'min_samples_leaf': 7}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:36:57,789] Trial 11 finished with value: 0.7447307078886027 and parameters: {'n_estimators': 270, 'max_depth': 3, 'min_samples_split': 6, 'min_samples_leaf': 1}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:04,077] Trial 12 finished with value: 0.7587633419212366 and parameters: {'n_estimators': 293, 'max_depth': 4, 'min_samples_split': 5, 'min_samples_leaf': 2}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:05,964] Trial 13 finished with value: 0.8331026867868973 and parameters: {'n_estimators': 288, 'max_depth': 7, 'min_samples_split': 2, 'min_samples_leaf': 2}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:07,236] Trial 14 finished with value: 0.8850006134216661 and parameters: {'n_estimators': 122, 'max_depth': 22, 'min_samples_split': 2, 'min_samples_leaf': 3}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:09,007] Trial 15 finished with value: 0.8625616488774384 and parameters: {'n_estimators': 119, 'max_depth': 24, 'min_samples_split': 4, 'min_samples_leaf': 4}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:10,239] Trial 16 finished with value: 0.8639627039627038 and parameters: {'n_estimators': 115, 'max_depth': 23, 'min_samples_split': 4, 'min_samples_leaf': 4}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:10,751] Trial 17 finished with value: 0.8548521653784812 and parameters: {'n_estimators': 64, 'max_depth': 27, 'min_samples_split': 3, 'min_samples_leaf': 4}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:11,831] Trial 18 finished with value: 0.8779879769353454 and parameters: {'n_estimators': 56, 'max_depth': 30, 'min_samples_split': 2, 'min_samples_leaf': 3}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:15,441] Trial 19 finished with value: 0.900424487792909 and parameters: {'n_estimators': 146, 'max_depth': 41, 'min_samples_split': 2, 'min_samples_leaf': 2}. Best is trial 5 with value: 0.9018279965648388.\n","[I 2024-12-13 15:37:16,561] Trial 20 finished with value: 0.9165452091767883 and parameters: {'n_estimators': 130, 'max_depth': 40, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:20,113] Trial 21 finished with value: 0.9116378358483621 and parameters: {'n_estimators': 154, 'max_depth': 44, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:20,687] Trial 22 finished with value: 0.9123420439209913 and parameters: {'n_estimators': 148, 'max_depth': 49, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:24,128] Trial 23 finished with value: 0.9074444853392223 and parameters: {'n_estimators': 150, 'max_depth': 50, 'min_samples_split': 6, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:24,813] Trial 24 finished with value: 0.9067451846399214 and parameters: {'n_estimators': 153, 'max_depth': 50, 'min_samples_split': 6, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:26,604] Trial 25 finished with value: 0.9109434425223899 and parameters: {'n_estimators': 91, 'max_depth': 38, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:27,284] Trial 26 finished with value: 0.9116427432216906 and parameters: {'n_estimators': 83, 'max_depth': 39, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:29,733] Trial 28 finished with value: 0.883604465709729 and parameters: {'n_estimators': 60, 'max_depth': 39, 'min_samples_split': 6, 'min_samples_leaf': 3}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:31,441] Trial 27 finished with value: 0.8772960372960373 and parameters: {'n_estimators': 137, 'max_depth': 46, 'min_samples_split': 7, 'min_samples_leaf': 3}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:32,262] Trial 29 finished with value: 0.8737774506195558 and parameters: {'n_estimators': 87, 'max_depth': 34, 'min_samples_split': 7, 'min_samples_leaf': 3}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:32,465] Trial 30 finished with value: 0.8457146362409521 and parameters: {'n_estimators': 35, 'max_depth': 32, 'min_samples_split': 7, 'min_samples_leaf': 5}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:37,405] Trial 31 finished with value: 0.8492356766040977 and parameters: {'n_estimators': 202, 'max_depth': 46, 'min_samples_split': 5, 'min_samples_leaf': 5}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:37,528] Trial 32 finished with value: 0.9158508158508158 and parameters: {'n_estimators': 195, 'max_depth': 46, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 20 with value: 0.9165452091767883.\n","[I 2024-12-13 15:37:40,164] Trial 33 finished with value: 0.917246963562753 and parameters: {'n_estimators': 101, 'max_depth': 42, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:43,570] Trial 34 finished with value: 0.8948202674518464 and parameters: {'n_estimators': 184, 'max_depth': 40, 'min_samples_split': 6, 'min_samples_leaf': 2}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:46,065] Trial 35 finished with value: 0.8934192123665807 and parameters: {'n_estimators': 177, 'max_depth': 43, 'min_samples_split': 6, 'min_samples_leaf': 2}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:46,418] Trial 36 finished with value: 0.9046301067353699 and parameters: {'n_estimators': 107, 'max_depth': 44, 'min_samples_split': 4, 'min_samples_leaf': 2}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:48,751] Trial 37 finished with value: 0.805748987854251 and parameters: {'n_estimators': 106, 'max_depth': 47, 'min_samples_split': 4, 'min_samples_leaf': 8}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:51,527] Trial 38 finished with value: 0.810656361182677 and parameters: {'n_estimators': 211, 'max_depth': 47, 'min_samples_split': 8, 'min_samples_leaf': 8}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:54,444] Trial 39 finished with value: 0.9018378113114955 and parameters: {'n_estimators': 212, 'max_depth': 18, 'min_samples_split': 8, 'min_samples_leaf': 1}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:55,980] Trial 40 finished with value: 0.9151441540915226 and parameters: {'n_estimators': 133, 'max_depth': 36, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:37:59,031] Trial 41 finished with value: 0.9165476628634524 and parameters: {'n_estimators': 134, 'max_depth': 36, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:38:00,141] Trial 42 finished with value: 0.9151441540915226 and parameters: {'n_estimators': 137, 'max_depth': 37, 'min_samples_split': 5, 'min_samples_leaf': 1}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:38:02,460] Trial 43 finished with value: 0.9011286958655379 and parameters: {'n_estimators': 126, 'max_depth': 37, 'min_samples_split': 5, 'min_samples_leaf': 2}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:38:05,336] Trial 44 finished with value: 0.9039308060360692 and parameters: {'n_estimators': 192, 'max_depth': 35, 'min_samples_split': 4, 'min_samples_leaf': 2}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:38:07,017] Trial 45 finished with value: 0.9004220341062446 and parameters: {'n_estimators': 172, 'max_depth': 34, 'min_samples_split': 3, 'min_samples_leaf': 2}. Best is trial 33 with value: 0.917246963562753.\n","[I 2024-12-13 15:38:07,423] Trial 46 finished with value: 0.9242620537357379 and parameters: {'n_estimators': 72, 'max_depth': 42, 'min_samples_split': 3, 'min_samples_leaf': 1}. Best is trial 46 with value: 0.9242620537357379.\n","[I 2024-12-13 15:38:10,109] Trial 47 finished with value: 0.9067402772665931 and parameters: {'n_estimators': 72, 'max_depth': 28, 'min_samples_split': 6, 'min_samples_leaf': 1}. Best is trial 46 with value: 0.9242620537357379.\n","[I 2024-12-13 15:38:11,088] Trial 49 finished with value: 0.8218648018648018 and parameters: {'n_estimators': 30, 'max_depth': 42, 'min_samples_split': 3, 'min_samples_leaf': 6}. Best is trial 46 with value: 0.9242620537357379.\n","[I 2024-12-13 15:38:11,197] Trial 48 finished with value: 0.9256631088210037 and parameters: {'n_estimators': 100, 'max_depth': 42, 'min_samples_split': 3, 'min_samples_leaf': 1}. Best is trial 48 with value: 0.9256631088210037.\n"]}]},{"cell_type":"code","source":["from joblib import dump, load\n","\n","# Save the final model to a file\n","dump(final_f_class_pipe, 'final_model_A2.joblib')\n","\n","# Load the model from the file\n","final_clf_reloaded = load('final_model_A2.joblib')\n","\n","dump(final_f_class_pred_comp, 'final_predictions_A2.csv')\n","predictions = load('final_predictions_A2.csv')\n","print(predictions)\n","count_ones = np.sum(predictions == 1)\n","count_zeros = np.sum(predictions == 0)\n","\n","print(\"Count of 1's: \", count_ones)\n","print(\"Count of 0's: \", count_zeros)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xochjhfsdzdu","executionInfo":{"status":"ok","timestamp":1734104291767,"user_tz":-60,"elapsed":3,"user":{"displayName":"Sebastian Mendoza","userId":"06635268937739019257"}},"outputId":"6c85b47d-5ba3-4a6f-aa6f-ad02d9bb7fe5"},"execution_count":93,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 0 0 0\n"," 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n"," 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]\n","Count of 1's:  111\n","Count of 0's:  89\n"]}]}]}